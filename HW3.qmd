---
title: "HW3: Data Manipulations and Packages"
format: pdf
editor: visual
---

```{r}
#| warning: FALSE

library(tidyverse)
library(palmerpenguins)
```

## Task 1

### Part A

The `read_csv` function is a specific use-case of the `read_delim` function that specifies that the delimiter must be a comma (`,`). The data that we're trying to read in here is delimited by semi-colons (`;`) so we cannot use the `read_csv` function as a result. The help file `?read_csv` specifies that `read_csv2` supports semi-colons (`;`) so we can use that function instead.

```{r}
#Read in and display data.txt
data <- read_csv2(".\\data\\data.txt", col_names = TRUE, 
                  show_col_types = FALSE)
data
```

### Part B

```{r}
#Read in and display data2.txt
data2 <- read_delim(".\\data\\data2.txt", col_names = TRUE, 
                    col_types = "fdc", delim = '6')
data2
```

## Task 2

### Part A

```{r}
#Read in trailblazer data and take a look to make sure it read properly
trailblazer <- read.csv(".\\data\\trailblazer.csv", header = TRUE)
glimpse(trailblazer)
```

### Part B

```{r}
#Pivot the dataset into a longer format and separate 
#games by Home and Away status
trailblazer_longer <- trailblazer |>
  pivot_longer(cols = 2:11,
               names_to = "game",
               values_to = "points") |>
  separate(game, into = c("game", "location"), sep = "_")

#Display results!
head(trailblazer_longer, n = 5)
```

### Part C

```{r}
#We wish to know who scored more when playing at home versus playing away

trailblazer_wider <- trailblazer_longer |>
  #Start with a wide pivot
  pivot_wider(names_from = location,
              values_from = points) |>
  #Group by players
  group_by(Player) |>
  #Add mean values for home and away scoring, then take the difference
   mutate(mean_home = mean(Home, na.rm = TRUE),
          mean_away = mean(Away, na.rm = TRUE),
          mean_diff = mean_home - mean_away) |>
  #Sort by descending mean difference
  arrange(desc(mean_diff)) |>
  #Subset to the variables we care about
  select(Player, mean_diff) |>
  #Only include distinct values
  distinct(Player, .keep_all = TRUE)


#Display results!
trailblazer_wider
```

In the first 10 games of the 2021-2022 NBA season, the following players scored more points at home games than they did at away games, on average: Jusuf Nurkic, Robert Covington, Nassir Little, Damian Lillard, and Cody Zeller.

## Task 3

### Part A

```{r}
#Incorrect pivot
incorrect <- penguins |>
  select(species, island, bill_length_mm) |>
  pivot_wider(
  names_from = island, values_from = bill_length_mm
  )

#Display
incorrect
```

Notice that the output from `dplyr` is telling us that the measurements from `bill_length_mm` are not uniquely identified. This is because there are multiple measurements for each penguin species at each island, so the package doesn't know how we want the data to be handled in this instance. The solution that it defaults to is to store all of the measurements it can find as a `list` object in each cell of the tibble. For instance, notice that each column is of type `<list>`. This means that each observation in the column is a `list` object which itself is storing multiple observations. We see that there are a few different lists in the cells. For example, the observations for the Adelie penguins on Torgersen Island are stored as `<dbl [52]>`, which means that the list is storing observations in the double format, and that the list is has 52 observations. We also see that there are some cells with the observation `<NULL>`. These are combinations in the original dataset that had no observations, so there was no object to create. Since the package doesn't know what format to make the values, it just assumes they are null, and hence the null list.

### Part B

```{r}
#Correct pivot
penguins_correct <- penguins |>
  #Select relevant variables
  select(species, island, bill_length_mm) |>
  #Group variables by species and island
  group_by(species, island) |>
  #Count the frequency of each group in the dataset
  summarise(bill_length_mm = n()) |>
  #Pivot for a cleaner display
  pivot_wider(names_from = island, values_from = bill_length_mm) |>
  #Replace empty values with 0 for consistency
  mutate(Biscoe = replace_na(Biscoe, 0),
         Dream = replace_na(Dream, 0),
         Torgersen = replace_na(Torgersen, 0))
  


#Display results!
penguins_correct
```

## Task 4

```{r}
#Replace missing values in the penguins dataset
penguins_filled <- penguins |>
  #Look for empty values and replace them with the given values
  mutate(bill_length_mm = case_when(
    species == "Adelie" & is.na(bill_length_mm) ~ 26,
    species == "Gentoo" & is.na(bill_length_mm) ~ 30,
    .default = bill_length_mm #base case
  )) |>
  arrange(bill_length_mm) #Sort by ascending bill length

#Display results!
head(penguins_filled, 10)
```
